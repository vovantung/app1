pipeline {
  agent any

  environment {
    KUBECONFIG = '/var/lib/jenkins/.kube/config'
    AWS_ACCOUNT_ID = '211125364313'  // Thay bằng tài khoản thật
    AWS_REGION     = 'ap-southeast-1'
    IMAGE_NAME     = 'app1'          // Tên repo trên ECR
  }

  stages {
    stage('Clone') {
      steps {
        git branch: 'main', url: 'https://github.com/vovantung/app1.git'
      }
    }

    stage('Build app') {
      steps {
        sh 'mvn clean install'
      }
    }

    stage('Get App Version') {
      steps {
        script {
          sh '''
            mvn -B -Dstyle.color=never help:evaluate -Dexpression=project.version -q -DforceStdout \
              | sed -E 's/\\x1B\\[[0-9;]*[a-zA-Z]//g' > version.txt
          '''
          env.APP_VERSION = readFile('version.txt').trim()
        }
      }
    }

    stage('Build Image with Kaniko') {
      agent {
        kubernetes {
          yaml '''
apiVersion: v1
kind: Pod
spec:
  containers:
    - name: kaniko
      image: gcr.io/kaniko-project/executor:latest
      tty: true
      volumeMounts:
        - name: kaniko-secret
          mountPath: /kaniko/.docker
  volumes:
    - name: kaniko-secret
      secret:
        secretName: ecr-secret
'''
        }
      }
      steps {
        container('kaniko') {

          def image = "211125364313.dkr.ecr.ap-southeast-1.amazonaws.com/app1:${APP_VERSION}"
          sh '''
            /kaniko/executor \
              --context=\$WORKSPACE \
              --dockerfile=\$WORKSPACE/app1/Dockerfile \
              --destination=${image} \
              --skip-tls-verify
          '''
        }
      }
    }

    stage('Prepare Deployment YAML') {
      steps {
        sh '''
          cp deployment.yaml.template deployment.yaml
          sed -i "s/__VERSION__/${APP_VERSION}/g" deployment.yaml
        '''
      }
    }

    stage('Deploy to Minikube') {
      steps {
        sh 'kubectl apply -f deployment.yaml'
      }
    }
  }
}
